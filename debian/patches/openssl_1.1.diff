diff --git a/c_src/fast_tls.c b/c_src/fast_tls.c
index b46dfb1..40b7d89 100644
--- a/c_src/fast_tls.c
+++ b/c_src/fast_tls.c
@@ -69,6 +69,10 @@ typedef unsigned __int32 uint32_t;
 #define DH_set0_pqg(dh, dh_p, param, dh_g) (dh)->p = dh_p; (dh)->g = dh_g
 #endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10200000L
+#define SSL_is_server(s) (s)->server
+#endif
+
 void __free(void *ptr, size_t size) {
     enif_free(ptr);
 }
@@ -384,9 +388,7 @@ static int setup_dh(SSL_CTX *ctx, char *dh_file) {
 
 static void ssl_info_callback(const SSL *s, int where, int ret) {
     state_t *d = (state_t *) SSL_get_ex_data(s, ssl_index);
-    if ((where & SSL_CB_HANDSHAKE_START) && d->handshakes) {
-        d->handshakes++;
-    } else if ((where & SSL_CB_HANDSHAKE_DONE) && !d->handshakes) {
+    if ((where & SSL_CB_HANDSHAKE_START)) {
         d->handshakes++;
     }
 }
@@ -1046,7 +1048,8 @@ static ERL_NIF_TERM get_decrypted_input_nif(ErlNifEnv *env, int argc,
             }
         }
 
-        if (state->handshakes > 1) {
+        if (state->handshakes > 1 && SSL_is_server(state->ssl) &&
+            !SSL_get_secure_renegotiation_support(state->ssl)) {
             enif_release_binary(&output);
             char *error = "client renegotiations forbidden";
             enif_mutex_unlock(state->mtx);
diff --git a/c_src/options.h b/c_src/options.h
index 64a8e77..ba5ee13 100644
--- a/c_src/options.h
+++ b/c_src/options.h
@@ -102,6 +102,9 @@ static ssl_option_t ssl_options[] = {
 #if defined(SSL_OP_NO_TLSv1_2)
 	{"no_tlsv1_2", SSL_OP_NO_TLSv1_2},
 #endif
+#if defined(SSL_OP_NO_TLSv1_3)
+  {"no_tlsv1_3", SSL_OP_NO_TLSv1_3},
+#endif
 #if defined(SSL_OP_PKCS1_CHECK_1)
 	{"pkcs1_check_1", SSL_OP_PKCS1_CHECK_1},
 #endif
diff --git a/src/fast_tls.erl b/src/fast_tls.erl
index 3ca0cbf..b4addae 100644
--- a/src/fast_tls.erl
+++ b/src/fast_tls.erl
@@ -508,12 +508,12 @@ transmission_test() ->
     LPid ! {stop, self()},
     receive
 	{received, Msg} ->
-	    ?assertEqual(Msg, <<"abcdefghi">>)
+	    ?assertEqual(<<"abcdefghi">>, Msg)
     end.
 
 not_compatible_protocol_options_test() ->
-    {LPid, Port} = setup_listener([{protocol_options, <<"no_sslv2|no_sslv3|no_tlsv1_1|no_tlsv1_2">>}]),
-    SPid = setup_sender(Port, [{protocol_options, <<"no_sslv2|no_sslv3|no_tlsv1|no_tlsv1_2">>}]),
+    {LPid, Port} = setup_listener([{protocol_options, <<"no_sslv2|no_sslv3|no_tlsv1_1|no_tlsv1_2|no_tlsv1_3">>}]),
+    SPid = setup_sender(Port, [{protocol_options, <<"no_sslv2|no_sslv3|no_tlsv1|no_tlsv1_2|no_tlsv1_3">>}]),
     SPid ! {stop, self()},
     receive
 	{result, Res} ->
@@ -521,8 +521,10 @@ not_compatible_protocol_options_test() ->
     end,
     LPid ! {stop, self()},
     receive
+	{received, {error, _, _} = Msg} ->
+	    ?assertMatch({error, _, <<>>}, Msg);
 	{received, Msg} ->
-	    ?assertEqual(Msg, <<>>)
+	    ?assertMatch(<<>>, Msg)
     end.
 
 setup_listener(Opts) ->
@@ -546,11 +548,16 @@ listener_loop(TLSSock, Msg) ->
 	    after 0 ->
 		listener_loop(TLSSock, Msg)
 	    end;
-	{error, _} ->
+	{error, closed} ->
 	    receive
 		{stop, Pid} ->
 		    Pid ! {received, Msg}
 	    end;
+	{error, Err} ->
+	    receive
+		{stop, Pid} ->
+		    Pid ! {received, {error, Err, Msg}}
+	    end;
 	{ok, Data} ->
 	    listener_loop(TLSSock, <<Msg/binary, Data/binary>>)
     end.
@@ -576,7 +583,9 @@ sender_loop(TLSSock) ->
 	      close(TLSSock),
 	      ok
 	  catch
-	      _:Err -> Err
+	      _:Err ->
+	      close(TLSSock),
+	      Err
 	  end,
     receive
 	{stop, Pid} ->
diff --git a/tests/cert.pem b/tests/cert.pem
index 656369c..7e110f0 100644
--- a/tests/cert.pem
+++ b/tests/cert.pem
@@ -1,54 +1,54 @@
 -----BEGIN CERTIFICATE-----
-MIIEjTCCA3WgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJBVTET
-MBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50ZXJuZXQgV2lkZ2l0cyBQ
-dHkgTHRkMB4XDTE3MDMwNzA5NTgxNloXDTQ0MDcyMzA5NTgxNlowWTELMAkGA1UE
+MIIEjTCCA3WgAwIBAgIBATANBgkqhkiG9w0BAQsFADBFMQswCQYDVQQGEwJBVTET
+MBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQ
+dHkgTHRkMB4XDTE4MDgyNDA5MzA1NloXDTQ2MDEwOTA5MzA1NlowWTELMAkGA1UE
 BhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNVBAoTGEludGVybmV0IFdp
 ZGdpdHMgUHR5IEx0ZDESMBAGA1UEAxMJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0B
-AQEFAAOCAQ8AMIIBCgKCAQEAnzzyImmDW0BdGoqsBJkIfcp0YjkMN6HDuRxTHvkv
-lXU1q9u1VOsoC84Uf+x2VC+UauT44lyqQPH2WorztEqB5y0N0BLISf1ZNcS/s6iB
-OaL6nAmA+A6Lm73Gt+HZP8yFWCerPWchHppOebei+edcxhRdjOJYU4wudvxr/tGg
-qsqeY6beV1T4gx8w5E/qRZ9r/ZCNQUjOS1Dj1KLigWVhVviF2Ynli2GG46cLwRPb
-MgK3i4Uu57E0YlnZYKp9uWLn673yxwoOr7uVyvuVGx70SmvTIC3Logei6D76OCsw
-uWCD8iKd6jpg84sHCtlFxVbeMAXBSVTRXJVRJYb+hB7Q1QIDAQABo4IBcjCCAW4w
+AQEFAAOCAQ8AMIIBCgKCAQEAwLATNFRSFKTfWd0HHoX4uw9lWw5uuq/bAIx9yYKY
+TaOr/tQKgzS2EXSnvMngrywJlP1HUzLrp3WNR0CiPIQ0YfeAP3xiSrotEWObRb/0
+YwOZhCbOi0WpWPgZh3ct/XaEHhbnKYtblya1wVrCN/yur3ck+ru4Mka2lfxouKF9
+y8kZn2qF0CEbR/bbJiOy0Cr+q+LCIOiD+iwKHhju6ks+OqmFwXhglE62b7yKZtcu
+SddnsimF6n0VXkS2Vm5Kg901Sed7QPtVR6EtIBh7WiwU6iLoOofFjOg3B7v3K8hX
+66Scj5V/mz++m2W9BTqkoYRmszPHXnFeF8ZhAzc2ncUWrQIDAQABo4IBcjCCAW4w
 CQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2Vy
-dGlmaWNhdGUwHQYDVR0OBBYEFD4Lfl3x6oeBw/MfBdOCmyyFV2NKMB8GA1UdIwQY
-MBaAFND2ZsvHIjITekPKs0ywLfoNEen5MDMGA1UdHwQsMCowKKAmoCSGImh0dHA6
+dGlmaWNhdGUwHQYDVR0OBBYEFEM665UV1uNuXuoj2Lq4YvUig8fMMB8GA1UdIwQY
+MBaAFIUaybHx/YmS/2ezwl7DkezTHoBBMDMGA1UdHwQsMCowKKAmoCSGImh0dHA6
 Ly9sb2NhbGhvc3Q6NTI4MC9kYXRhL2NybC5kZXIwNgYIKwYBBQUHAQEEKjAoMCYG
 CCsGAQUFBzABhhpodHRwOi8vbG9jYWxob3N0OjUyODAvb2NzcDALBgNVHQ8EBAMC
 BeAwJwYDVR0lBCAwHgYIKwYBBQUHAwkGCCsGAQUFBwMBBggrBgEFBQcDAjBQBgNV
 HREESTBHggsqLmxvY2FsaG9zdKA4BggrBgEFBQcIBaAsDCp0ZXN0X3NpbmdsZSEj
-JCVeKigpYH4rLTtfPVtde318XEBsb2NhbGhvc3QwDQYJKoZIhvcNAQEFBQADggEB
-AG4YXWyrGYBZqupfeAJ81IBz6gFFZ5GIDYdM+x6ewR/o+ALUxGpZRgnSHei1Fh4M
-wwrGLRIwqpeTtfs6BM0ld7tb0sJeO/B3QxzduKGPnmVni0S/s09m/4tehS4EnRd6
-OxRvdCQFxMT5t0bWpUyY063xytju4vHYBMdpAkqyRuqb7of0qY1zfAWk4TKPi1pr
-O/vCes/asXEumn4MLZPGaoIiHNMacjehimp0g5y8FmnldchuZO94NZ/SYoAo1MXC
-0SyW6WEuIelnNXpzib8EesDgGP5zsUSvlb3EbEnEXAnQlbHfkZJhUHojlFVX+ALc
-6WYvzGhKeh6QoJ64pUCnRlY=
+JCVeKigpYH4rLTtfPVtde318XEBsb2NhbGhvc3QwDQYJKoZIhvcNAQELBQADggEB
+AGYMvXw1GZak2blxC2gr7p68MTjrPYAs26yKDuLR0Wpg1wMgnAelsMPrjjuSxWQX
+MlVFW1FD7OPIsgxgCZaOJiITEK6TgPa+XsSZa4H2o9fpIUd9Dy18sxJIjEpQMYa3
+L5Uq5tMTlxK9tovH3wNbdnW24MZ0nlWP/uzspbXqk7F/C6AbLX6tHLfJhcpyg94Z
+UY/pZG9IP6MME784eEubP5I0mxSM2JN5JiPKsk14/a4veUBJXq+vcMVCfuxNCWVA
+RRk9MJ9U31W3D6G8Y7Es53I2mmEHoN1mFHKmW3El3gtXJ7aUenQP0ayGTXlnFuGd
+fPrgVCvv3ykkKd6cizhB1O8=
 -----END CERTIFICATE-----
 -----BEGIN RSA PRIVATE KEY-----
-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
+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
 -----END RSA PRIVATE KEY-----
